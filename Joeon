
using namespace std;

// cycle macro
#define rep(i, l, r) for(register int i = l; i < r; i++)
#define hrp(i, l, r) for(register int i = l; i <= r; i++)
#define rev(i, r, l) for(register int i = r; i >= l; i--)

//typedef
typedef long long ll;
// typedef pair<int, int> pii;

// Optimize
/*
#pragma GCC optimize(3)
#pragma GCC target("avx")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("inline-functions")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("inline-small-functions")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("inline-functions-called-once")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize(2)
*/

// DEBUG

// D
namespace ts
{
	string toString(long long e)
	{
		bool t = 0;
		string str;
		if (e < 0) t = 1, e = -e;
		do str += '0'+e%10, e /= 10;
		while(e);
		reverse(str.begin(), str.end());
		if (t) str.insert(0, "-");
		return str += ", ";
	}
	inline string toString(string s)
	{
		return '"' + s + "\", ";
	}
	template <class T, class U> inline string toString(pair<T, U> p)
	{
		return "(" + toString(p.first) + toString(p.second) + "), ";
	}
	template <size_t N> inline string toString(bitset<N> bs)
	{
		string str;
		for (size_t i = 0; i < N; ++i) str += '0' + bs[i];
		return str += ", ";
	}
	template <class C> inline string toString(vector<C> c)
	{
		string str = "{";
		for (auto& e : c) str += toString(e);
		return str += "}, ";
	}
	template <class C> inline string toString(set<C> c)
	{
		string str = "{";
		for (auto& e : c) str += toString(e);
		return str += "}, ";
	}
	template <class C> inline string toString(queue<C> c)
	{
		string str = "{";
		for (auto& e : c) str += toString(e);
		return str += "}, ";
	}
	template <class C> inline string toString(list<C> c)
	{
		string str = "{";
		for (auto& e : c) str += toString(e);
		return str += "}, ";
	}
	template <class T, class U> inline string toString(map<T, U> c)
	{
		string str = "{";
		for (auto& e : c) str += toString(e);
		return str += "}, ";
	}
}
inline void debug(void)
{
	cerr<<'\n';
}
template <class Head, class... Tail> inline void debug(Head head, Tail... tail)
{
	cerr<<ts::toString(head);
	debug(tail...);
}

#define D(...) cerr<<"D:  ["<<#__VA_ARGS__<<"]: ", debug(__VA_ARGS__)

// R

inline void R(auto t, ll e)
{
	ll cnt = 0;
	cout<<"R:\n\t{";
	for(ll i = 0; i < e; i++) cout<<*(t+i)<<", ";
	cout<<"}\n";
}

// DR
// UNFINISHED

inline void DR(auto t, ll a, ll b)
{
	cerr<<"R:";
	for(ll i = 0; i < a; i++)
	{
		cerr<<"\n\t{";
		for(ll j = 0; j < b; j++)
		{
			auto p = t+i;
			cerr<<*(p+j)<<", ";
		}
		cerr<<"}";
	}
}
